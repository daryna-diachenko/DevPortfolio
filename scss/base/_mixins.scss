// px to rem
@use "sass:math";

// @function rem($pxValue) {
//     @return math.div($pxValue, 16px) * 1rem;
// }
$browser-context: 16; // Default
@function rem($pixels, $context: $browser-context) {
  @return math.div($pixels, $context) + rem;
}

@function em($pixels, $context: $browser-context) {
  @return calc($pixels / $context) + em;
}

$maxWidth: 1440px;
$maxWidthContainer: 1200px;

@mixin adaptiveValue($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    // Всегда
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}

@function adaptive($minVal,$maxVal) {
    $ans: calc(#{$minVal + px} + (#{$maxVal} - #{$minVal}) * ((100vw - 320px) / (#{$containerVal} - 320)));
    @return #{$ans};
}
